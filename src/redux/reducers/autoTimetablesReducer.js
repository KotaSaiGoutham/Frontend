// reducers/autoTimetablesReducer.js

import {
  SAVE_AUTOGENERATED_TIMETABLES_REQUEST,
  SAVE_AUTOGENERATED_TIMETABLES_SUCCESS,
  SAVE_AUTOGENERATED_TIMETABLES_FAILURE,
  FETCH_AUTOTIMETABLES_REQUEST,
  FETCH_AUTOTIMETABLES_SUCCESS,
  FETCH_AUTOTIMETABLES_FAILURE,
  UPDATE_AUTOTIMETABLE_REQUEST,
  UPDATE_AUTOTIMETABLE_SUCCESS,
  UPDATE_AUTOTIMETABLE_FAILURE,
  DELETE_AUTOTIMETABLE_REQUEST,
  DELETE_AUTOTIMETABLE_SUCCESS,
  DELETE_AUTOTIMETABLE_FAILURE,
  UPDATE_AUTO_TIMETABLE_TOPIC_REQUEST,
  UPDATE_AUTO_TIMETABLE_TOPIC_SUCCESS,
  UPDATE_AUTO_TIMETABLE_TOPIC_FAILURE,
  SAVE_OR_FETCH_AUTOTIMETABLES_REQUEST, // Add new type
  SAVE_OR_FETCH_AUTOTIMETABLES_SUCCESS, // Add new type
  SAVE_OR_FETCH_AUTOTIMETABLES_FAILURE, // Add new type
} from "../types";

// --- NEW Auto-Timetable Reducer ---
const initialAutoTimetablesState = {
  timetables: [],
  loading: false,
  error: null,
};

const autoTimetablesReducer = (state = initialAutoTimetablesState, action) => {
  switch (action.type) {
    case SAVE_AUTOGENERATED_TIMETABLES_REQUEST:
    case FETCH_AUTOTIMETABLES_REQUEST:
    case UPDATE_AUTOTIMETABLE_REQUEST:
    case DELETE_AUTOTIMETABLE_REQUEST:
    case UPDATE_AUTO_TIMETABLE_TOPIC_REQUEST:
    case SAVE_OR_FETCH_AUTOTIMETABLES_REQUEST: // Handle new request
      return { ...state, loading: true, error: null };

    // This success case now handles both FETCH and the new SAVE_OR_FETCH logic
    case FETCH_AUTOTIMETABLES_SUCCESS:
    case SAVE_OR_FETCH_AUTOTIMETABLES_SUCCESS: // Handle new success
      return {
        ...state,
        loading: false,
        timetables: action.payload,
        error: null,
      };
case UPDATE_AUTOTIMETABLE_SUCCESS:
  // action.payload will be the entire updated timetable entry object
  const updatedAutoTimetables = state.timetables.map((timetable) =>
    // Find the timetable with the matching ID
    timetable.id === action.payload.id ? action.payload : timetable
  );
  return {
    ...state,
    loading: false,
    timetables: updatedAutoTimetables,
    error: null,
  };
    case UPDATE_AUTO_TIMETABLE_TOPIC_SUCCESS:
      const updatedTimetables = state.timetables.map((tt) =>
        tt.id === action.payload.id ? { ...tt, ...action.payload.updatedData } : tt
      );
      return {
        ...state,
        loading: false,
        timetables: updatedTimetables,
        error: null,
      };

    case DELETE_AUTOTIMETABLE_SUCCESS:
      return {
        ...state,
        loading: false,
        timetables: state.timetables.filter(
          (tt) => tt.id !== action.payload
        ),
        error: null,
      };

    case SAVE_AUTOGENERATED_TIMETABLES_FAILURE:
    case FETCH_AUTOTIMETABLES_FAILURE:
    case UPDATE_AUTOTIMETABLE_FAILURE:
    case DELETE_AUTOTIMETABLE_FAILURE:
    case UPDATE_AUTO_TIMETABLE_TOPIC_FAILURE:
    case SAVE_OR_FETCH_AUTOTIMETABLES_FAILURE: // Handle new failure
      return { ...state, loading: false, error: action.payload.error };

    default:
      return state;
  }
};

export default autoTimetablesReducer;