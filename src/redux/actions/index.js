import {
  API_REQUEST,
  FETCH_CLASSES_REQUEST,
  FETCH_CLASSES_SUCCESS,
  FETCH_CLASSES_FAILURE,
  FETCH_STUDENTS_REQUEST,
  FETCH_STUDENTS_SUCCESS,
  FETCH_STUDENTS_FAILURE,
  FETCH_SINGLE_STUDENT_REQUEST,
  FETCH_SINGLE_STUDENT_SUCCESS,
  FETCH_SINGLE_STUDENT_FAILURE,
  ADD_STUDENT_REQUEST, // NEW
  ADD_STUDENT_SUCCESS, // NEW
  ADD_STUDENT_FAILURE, // NEW
  ADD_WEEKLY_MARKS_REQUEST, // NEW
  ADD_WEEKLY_MARKS_SUCCESS, // NEW
  ADD_WEEKLY_MARKS_FAILURE, // NEW
  FETCH_EMPLOYEES_REQUEST,
  FETCH_EMPLOYEES_SUCCESS,
  FETCH_EMPLOYEES_FAILURE,
  ADD_EMPLOYEE_REQUEST, // NEW
  ADD_EMPLOYEE_SUCCESS, // NEW
  ADD_EMPLOYEE_FAILURE, // NEW
  UPDATE_DASHBOARD_CHART_DATA,
  SET_AUTH_ERROR,
  LOGOUT,
  ADD_TIMETABLE_REQUEST,
  ADD_TIMETABLE_SUCCESS,
  ADD_TIMETABLE_FAILURE,
  LOGIN_REQUEST, // NEW
  LOGIN_SUCCESS, // NEW
  LOGIN_FAILURE, // NEW
  SIGNUP_REQUEST, // <-- NEW
  SIGNUP_SUCCESS, // <-- NEW
  SIGNUP_FAILURE, // <-- NEW
  UPDATE_STUDENT_PAYMENT_REQUEST, // <-- NEW
  UPDATE_STUDENT_PAYMENT_SUCCESS, // <-- NEW
  UPDATE_STUDENT_PAYMENT_FAILURE, // <-- NEW
  FETCH_WEEKLY_MARKS_REQUEST, // <-- NEW
  FETCH_WEEKLY_MARKS_SUCCESS, // <-- NEW
  FETCH_WEEKLY_MARKS_FAILURE, // <-- NEW
  UPDATE_STUDENT_PAYMENT_STATUS_REQUEST,
  UPDATE_STUDENT_PAYMENT_STATUS_SUCCESS,
  UPDATE_STUDENT_PAYMENT_STATUS_FAILURE,
  UPDATE_STUDENT_CLASSES_REQUEST,
  UPDATE_STUDENT_CLASSES_SUCCESS,
  UPDATE_STUDENT_CLASSES_FAILURE,
  DELETE_TIMETABLE_REQUEST,
  DELETE_TIMETABLE_SUCCESS,
  DELETE_TIMETABLE_FAILURE,
  UPDATE_TIMETABLE_REQUEST,
  UPDATE_TIMETABLE_SUCCESS,
  UPDATE_TIMETABLE_FAILURE,
  ADD_STUDENT_CLEAR_STATUS,
  FETCH_PAYMENTS_REQUEST,
  FETCH_PAYMENTS_SUCCESS,
  FETCH_PAYMENTS_FAILURE,
  ADD_DEMO_CLASS_REQUEST,
  ADD_DEMO_CLASS_SUCCESS,
  ADD_DEMO_CLASS_FAILURE,
  FETCH_DEMO_CLASSES_REQUEST,
  FETCH_DEMO_CLASSES_SUCCESS,
  FETCH_DEMO_CLASSES_FAILURE,
  UPDATE_DEMO_CLASS_STATUS_REQUEST,
  UPDATE_DEMO_CLASS_STATUS_SUCCESS,
  UPDATE_DEMO_CLASS_STATUS_FAILURE,
  GENERATE_AND_SAVE_TIMETABLES_FAIL,
  GENERATE_AND_SAVE_TIMETABLES_SUCCESS,
  GENERATE_AND_SAVE_TIMETABLES_REQUEST,
  // NEW AUTOTIMETABLE ACTION TYPES
  FETCH_AUTOTIMETABLES_REQUEST,
  FETCH_AUTOTIMETABLES_SUCCESS,
  FETCH_AUTOTIMETABLES_FAILURE,
  SAVE_AUTOTIMETABLES_REQUEST,
  SAVE_AUTOTIMETABLES_SUCCESS,
  SAVE_AUTOTIMETABLES_FAILURE,
  UPDATE_AUTOTIMETABLE_REQUEST,
  UPDATE_AUTOTIMETABLE_SUCCESS,
  UPDATE_AUTOTIMETABLE_FAILURE,
  DELETE_AUTOTIMETABLE_REQUEST,
  DELETE_AUTOTIMETABLE_SUCCESS,
  DELETE_AUTOTIMETABLE_FAILURE,
  SAVE_AUTOGENERATED_TIMETABLES_REQUEST,
  SAVE_AUTOGENERATED_TIMETABLES_SUCCESS,
  SAVE_AUTOGENERATED_TIMETABLES_FAILURE,
  UPDATE_AUTO_TIMETABLE_TOPIC_REQUEST,
  UPDATE_AUTO_TIMETABLE_TOPIC_SUCCESS,
  UPDATE_AUTO_TIMETABLE_TOPIC_FAILURE,
  UPDATE_STUDENT_FIELD_REQUEST,
  UPDATE_STUDENT_FIELD_SUCCESS,
  UPDATE_STUDENT_FIELD_FAILURE,
  UPDATE_STUDENT_REQUEST,
  UPDATE_STUDENT_SUCCESS,
  UPDATE_STUDENT_FAILURE,
  DELETE_STUDENT_REQUEST,
  DELETE_STUDENT_SUCCESS,
  DELETE_STUDENT_FAILURE,
  DELETE_DEMO_CLASS_REQUEST,
  DELETE_DEMO_CLASS_SUCCESS,
  DELETE_DEMO_CLASS_FAILURE,
  UPDATE_DEMO_CLASS_REQUEST,
  UPDATE_DEMO_CLASS_SUCCESS,
  UPDATE_DEMO_CLASS_FAILURE,
  FETCH_EXPENDITURES_REQUEST,
  FETCH_EXPENDITURES_SUCCESS,
  FETCH_EXPENDITURES_FAILURE,
  ADD_EXPENDITURE_REQUEST,
  ADD_EXPENDITURE_SUCCESS,
  ADD_EXPENDITURE_FAILURE,
  DELETE_EXPENDITURE_REQUEST,
  DELETE_EXPENDITURE_SUCCESS,
  DELETE_EXPENDITURE_FAILURE,
  UPDATE_EXPENDITURE_REQUEST,
  UPDATE_EXPENDITURE_SUCCESS,
  UPDATE_EXPENDITURE_FAILURE,
  FETCH_EXPENDITURES_STUDENT_PAYMENTS_SUM_SUCCESS,
  FETCH_EXPENDITURES_SUM_SUCCESS,
  FETCH_TOTAL_PAYMENTS_SUCCESS,
  CLEAR_AUTH_ERROR,
  RESET_LOADING_STATE,
  FETCH_STUDENT_EXAMS_REQUEST,
  FETCH_STUDENT_EXAMS_SUCCESS,
  FETCH_STUDENT_EXAMS_FAILURE,
  ADD_STUDENT_EXAM_REQUEST,
  ADD_STUDENT_EXAM_SUCCESS,
  ADD_STUDENT_EXAM_FAILURE,
  UPDATE_STUDENT_EXAM_REQUEST,
  UPDATE_STUDENT_EXAM_SUCCESS,
  UPDATE_STUDENT_EXAM_FAILURE,
  DELETE_STUDENT_EXAM_REQUEST,
  DELETE_STUDENT_EXAM_SUCCESS,
  DELETE_STUDENT_EXAM_FAILURE,
  SAVE_OR_FETCH_AUTOTIMETABLES_REQUEST,
  SAVE_OR_FETCH_AUTOTIMETABLES_SUCCESS,
  SAVE_OR_FETCH_AUTOTIMETABLES_FAILURE,
  FETCH_CLASS_UPDATES_START,
  FETCH_CLASS_UPDATES_SUCCESS,
  FETCH_CLASS_UPDATES_FAILURE,
  FETCH_MONTHLY_PAYMENTS_SUCCESS,
  FETCH_ALL_MONTHLY_PAYMENTS_REQUEST,
  FETCH_ALL_MONTHLY_PAYMENTS_SUCCESS,
  FETCH_ALL_MONTHLY_PAYMENTS_FAILURE,
  UPDATE_SYLLABUS_REQUEST,
  UPDATE_SYLLABUS_SUCCESS,
  UPDATE_SYLLABUS_FAILURE,
    UPDATE_EMPLOYEE_REQUEST,
  UPDATE_EMPLOYEE_SUCCESS,
  UPDATE_EMPLOYEE_FAILURE,
} from "../types";
import dayjs from "dayjs"; // ← added
import { toJsDate } from "../../mockdata/function";
// --- 2. Import Utility Functions ---
// Removed generateMockTimetableData from here as it's no longer used for fallback by actions
import { sortAndFilterTimetableData } from "../../mockdata/function";
// Removed mockStudentsData/mockEmployeesData imports here as they are not for action fallbacks
import {
  generateMockTestScores,
  generateMockStudentDemographics,
  generateMockPaymentStatus,
} from "../../mockdata/mockdata";

// --- 3. Generic API Request Action (Unchanged) ---
export const apiRequest = ({
  url,
  method = "GET",
  data = null,
  onSuccess,
  onFailure,
  onStart,
  authRequired = true,
  timeout = 120000, // Add a timeout, e.g., 2 minutes (in milliseconds)
}) => {
  let deferred = {};
  const promise = new Promise((resolve, reject) => {
    deferred.resolve = resolve;
    deferred.reject = reject;
  });
  return {
    type: API_REQUEST,
    payload: { url, method, data, onSuccess, onFailure, onStart, authRequired },
    meta: { deferred },
    promise,
    timeout, // Add this line
  };
};

// --- 4. Authentication Action Creators (Unchanged) ---
export const setAuthError = (message) => ({
  type: SET_AUTH_ERROR,
  payload: message,
});

export const logoutUser = () => {
  localStorage.removeItem("token");
  localStorage.removeItem("userId"); // Ensure these are also removed
  localStorage.removeItem("userEmail"); // Ensure these are also removed
  return {
    type: LOGOUT,
  };
};
// In your Redux actions file

export const updateStudentField = (
  studentId,
  fieldName,
  newValue,
  currentStudentsData
) => {
  // `currentStudentsData` is optional, might be useful for optimistic updates
  const updateData = { [fieldName]: newValue };

  return apiRequest({
    url: `/api/data/students/${studentId}`,
    method: "PATCH",
    data: updateData,
    onStart: () => ({
      type: UPDATE_STUDENT_FIELD_REQUEST,
      payload: { studentId, fieldName, newValue }, // Include fieldName and newValue for tracking
    }),
    onSuccess: (data, dispatch) => {
      dispatch({
        type: UPDATE_STUDENT_FIELD_SUCCESS,
        payload: {
          studentId,
          fieldName,
          newValue,
          message: data.message || `${fieldName} updated.`,
        },
      });
      // OPTIONAL BUT RECOMMENDED: Re-fetch all students to ensure UI consistency
      // Especially if the backend has complex logic (like date calculations)
      dispatch(fetchStudents());
    },
    onFailure: (error, dispatch) => {
      console.error(
        `Error updating ${fieldName} for student ${studentId}:`,
        error
      );
      const errorMessage =
        (error && (error.error || error.message)) ||
        `Failed to update ${fieldName}.`;
      dispatch({
        type: UPDATE_STUDENT_FIELD_FAILURE,
        payload: {
          studentId,
          fieldName,
          error: errorMessage,
        },
      });
      if (error && (error.status === 401 || error.status === 403)) {
        dispatch(setAuthError("Session expired please login again"));
        dispatch(logoutUser());
      }
    },
    authRequired: true,
  });
};

// New action for active status toggle
export const toggleStudentActiveStatus = (studentId, currentIsActive) => {
  const newIsActive = !currentIsActive;
  return updateStudentField(studentId, "isActive", newIsActive);
};
// --- NEW: Signup User Action Creator ---
export const signupUser = ({ name, email, mobile, password }) =>
  apiRequest({
    url: "/api/auth/signup", // Correct signup endpoint
    method: "POST",
    data: { name, email, mobile, password },
    onStart: SIGNUP_REQUEST,
    onSuccess: (data, dispatch) => {
      // Signup successful, dispatch success action
      dispatch({
        type: SIGNUP_SUCCESS,
        payload: data.message || "Signup successful! You can now log in.", // Backend message
      });
      // Optionally, you might dispatch SET_AUTH_ERROR(null) to clear any previous auth errors
      dispatch(setAuthError(null));
    },
    onFailure: (error, dispatch) => {
      console.error("Signup API error received by onFailure:", error);
      // Determine the best error message for the user
      const errorMessage =
        (error && (error.error || error.message)) ||
        "Signup failed. Please try again.";
      dispatch({
        type: SIGNUP_FAILURE,
        payload: errorMessage,
      });
    },
    authRequired: false, // Signup does not require authentication
  });
export const clearAuthError = () => ({
  type: CLEAR_AUTH_ERROR,
});
export const resetLoadingState = () => ({
  type: RESET_LOADING_STATE,
});
export const loginUser = ({ username, password }) =>
  apiRequest({
    url: "/api/auth/login",
    method: "POST",
    data: { username, password },
    onStart: LOGIN_REQUEST,
    onSuccess: (data, dispatch) => {
      if (data.token) {
        localStorage.setItem("token", data.token);

        // --- IMPORTANT: Adapt this part based on the ACTUAL backend response ---
        let userIdToStore = null;
        let userEmailToStore = null;
        let userRoleToStore = data.role || "unknown"; // Get role from response
        let userNameToStore = null;
        let isPhysics = false; // Default to false
        let isChemistry = false; // Default to false
        let AllowAll = false; // Default to false
        const userDetailsFromResponse = data.data; // Assuming user details are under 'data'

        if (userRoleToStore === "student") {
          userIdToStore = userDetailsFromResponse.ContactNumber; // Or _id if available
          userEmailToStore = userDetailsFromResponse.ContactNumber; // Or a dedicated email field
          userNameToStore = userDetailsFromResponse.Name;
          // isPhysics, isChemistry, AllowAll from student response?
          // They were null in the JWT from your sample student response.
          // You need to decide if these flags come directly from the top level (data.isPhysics)
          // or if they are properties within data.data, or determined by the 'role'
          // For now, I'll assume they might be at the top level (data.isPhysics) if present,
          // but if not, they'll remain false from defaults.
          isPhysics = data.isPhysics || false;
          isChemistry = data.isChemistry || false;
          AllowAll = data.AllowAll || false;
        } else if (userRoleToStore === "faculty") {
          // Assuming a faculty response would have different keys, e.g.:
          userIdToStore = userDetailsFromResponse._id; // Example faculty ID
          userEmailToStore = userDetailsFromResponse.email;
          userNameToStore = userDetailsFromResponse.name;
          isPhysics = data.isPhysics || false; // Assuming these are still at top level or set based on faculty
          isChemistry = data.isChemistry || false;
          AllowAll = data.AllowAll || false;

          localStorage.setItem("userRole", userRoleToStore);
          localStorage.setItem("isPhysics", isPhysics);
          localStorage.setItem("isChemistry", isChemistry);
          localStorage.setItem("AllowAll", AllowAll);
        }

        localStorage.setItem("userId", userIdToStore);
        localStorage.setItem("userEmail", userEmailToStore);

        dispatch({
          type: LOGIN_SUCCESS,
          payload: {
            token: data.token,
            // The 'user' object in the payload should match what your reducer expects
            user: {
              id: userIdToStore,
              email: userEmailToStore,
              name: userNameToStore,
              role: userRoleToStore, // Include the role
              isPhysics: isPhysics,
              isChemistry: isChemistry,
              AllowAll: AllowAll,
              // Spread all other student/faculty data for the 'user' object in state
              ...userDetailsFromResponse,
            },
          },
        });
      } else {
        const errorMessage =
          "Login successful, but no token received. Please try again.";
        dispatch({ type: LOGIN_FAILURE, payload: errorMessage });
      }
    },
    onFailure: (error, dispatch) => {
      // ... (your existing onFailure logic is good for debugging)
      console.error("Login API error:", error);
      const errorMessage =
        error.message ||
        error.error ||
        "Login failed. Please check your credentials.";
      dispatch({ type: LOGIN_FAILURE, payload: errorMessage });
    },
    authRequired: false,
  });

export const fetchUpcomingClasses = (payload) =>
  apiRequest({
    url: `/api/data/timetable?date=${payload?.date}`,
    method: "GET",
    onStart: FETCH_CLASSES_REQUEST,
    onSuccess: (data, dispatch) => {
      const finalTimetable = sortAndFilterTimetableData(data || []);

      dispatch({
        type: FETCH_CLASSES_SUCCESS,
        payload: finalTimetable,
      });
    },
    onFailure: (error, dispatch) => {
      console.error("Error fetching timetable from API:", error);
      dispatch({
        type: FETCH_CLASSES_FAILURE,
        payload: {
          error: error.error || error.message || "Failed to fetch classes",
        },
      });
      if (error.status === 401 || error.status === 403) {
        dispatch(setAuthError("Session expired please login again"));
      }
    },
    authRequired: true,
  });

// --- 6. Student List Action Creator (Updated - no mock fallback) ---
export const fetchStudents = () =>
  apiRequest({
    url: "/api/data/students",
    method: "GET",
    onStart: FETCH_STUDENTS_REQUEST,
    onSuccess: (data, dispatch) => {
      const studentsFromApi = data || [];
      dispatch({
        type: FETCH_STUDENTS_SUCCESS,
        payload: studentsFromApi,
      });

      // Charts are generated using the actual fetched student data.
      dispatch({
        type: UPDATE_DASHBOARD_CHART_DATA,
        payload: {
          testResults: generateMockTestScores(), // This one is always mock
          studentDemographics: generateMockStudentDemographics(studentsFromApi),
          paymentStatus: generateMockPaymentStatus(studentsFromApi),
        },
      });
    },
    onFailure: (error, dispatch) => {
      console.error("Error fetching students from API:", error);
      const errorMessage =
        error.error || error.message || "Failed to fetch students";
      if (error.status === 401 || error.status === 403) {
        dispatch(setAuthError("Session expired please login again"));
      }
      dispatch({
        type: FETCH_STUDENTS_FAILURE,
        payload: { error: errorMessage },
      });
    },
    authRequired: true,
  });

// --- Fetch Single Student by ID Action Creator (Unchanged) ---
export const fetchStudentById = (studentId) =>
  apiRequest({
    url: `/api/students/${studentId}`,
    method: "GET",
    onStart: FETCH_SINGLE_STUDENT_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: FETCH_SINGLE_STUDENT_SUCCESS,
        payload: data,
      });
    },
    onFailure: (error, dispatch) => {
      console.error(`Error fetching student ${studentId} data:`, error);
      const errorMessage =
        error.error ||
        error.message ||
        `Failed to fetch student ${studentId} data`;
      if (error.status === 401 || error.status === 403) {
        dispatch(setAuthError("Session expired please login again"));
      }
      dispatch({
        type: FETCH_SINGLE_STUDENT_FAILURE,
        payload: { error: errorMessage },
      });
    },
    authRequired: true,
  });

// --- NEW: Add Student Action Creator ---
export const addStudent = (studentData) =>
  apiRequest({
    url: "/api/data/addStudent",
    method: "POST",
    data: studentData, // The student data to send in the request body
    onStart: ADD_STUDENT_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: ADD_STUDENT_SUCCESS,
        payload: data, // The response from the backend (e.g., confirmation message, new student ID)
      });
      // Optionally, you might refetch the entire student list to update UI
      dispatch(fetchStudents());
    },
    onFailure: (error, dispatch) => {
      console.error("Error adding student:", error);
      const errorMessage =
        error.error || error.message || "Failed to add student";
      if (error.status === 401 || error.status === 403) {
        dispatch(
          setAuthError(
            "Authentication failed or session expired. Please log in again."
          )
        );
      }
      dispatch({
        type: ADD_STUDENT_FAILURE,
        payload: { error: errorMessage },
      });
    },
    authRequired: true,
  });
export const updateStudent = (studentId, studentData) =>
  apiRequest({
    url: `/api/data/updateStudent/${studentId}`, // Note the studentId in the URL
    method: "PUT", // Or "PATCH", depending on your API
    data: studentData,
    onStart: UPDATE_STUDENT_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: UPDATE_STUDENT_SUCCESS,
        payload: data,
      });
      // You can either refetch all students or update the student list locally.
      // Refetching is simpler but less performant for large lists.
      dispatch(fetchStudents());
    },
    onFailure: (error, dispatch) => {
      console.error("Error updating student:", error);
      const errorMessage =
        error.error || error.message || "Failed to update student";
      if (error.status === 401 || error.status === 403) {
        dispatch(
          setAuthError(
            "Authentication failed or session expired. Please log in again."
          )
        );
      }
      dispatch({
        type: UPDATE_STUDENT_FAILURE,
        payload: { error: errorMessage },
      });
    },
    authRequired: true,
  });
export const deleteStudent = (studentId) =>
  apiRequest({
    url: `/api/data/deleteStudent/${studentId}`,
    method: "DELETE",
    onStart: DELETE_STUDENT_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: DELETE_STUDENT_SUCCESS,
        payload: data,
      });
      // Refresh the student list after a successful delete
      dispatch(fetchStudents());
    },
    onFailure: (error, dispatch) => {
      console.error("Error deleting student:", error);
      const errorMessage =
        error.error || error.message || "Failed to delete student";
      if (error.status === 401 || error.status === 403) {
        dispatch(
          setAuthError(
            "Authentication failed or session expired. Please log in again."
          )
        );
      }
      dispatch({
        type: DELETE_STUDENT_FAILURE,
        payload: { error: errorMessage },
      });
    },
    authRequired: true,
  });
export const fetchWeeklyMarks = (studentId) =>
  apiRequest({
    // IMPORTANT: Make sure this URL is correct and matches your backend API
    url: `/api/data/${studentId}/marks/weekly`, // Consistent URL with your previous component snippet
    method: "GET",
    onStart: FETCH_WEEKLY_MARKS_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: FETCH_WEEKLY_MARKS_SUCCESS,
        payload: data, // Assuming data is the array of weekly marks
      });
    },
    onFailure: (error, dispatch) => {
      console.error("Error fetching weekly marks:", error);
      const errorMessage =
        (error && (error.error || error.message)) ||
        "Failed to fetch weekly marks.";
      dispatch({
        type: FETCH_WEEKLY_MARKS_FAILURE,
        payload: errorMessage,
      });
      // Handle unauthorized/expired token through the middleware's global error handling
      // or explicitly here if needed.
      if (error && (error.status === 401 || error.status === 403)) {
        dispatch(setAuthError("Session expired please login again"));
        dispatch(logoutUser());
      }
    },
    authRequired: true, // This action requires authentication
  });
// --- NEW: Add Weekly Marks Action Creator ---
export const addWeeklyMarks = (studentId, newMark) =>
  apiRequest({
    url: `/api/data/students/${studentId}/marks/weekly`,
    method: "POST",
    data: newMark, // The marks data to send
    onStart: ADD_WEEKLY_MARKS_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: ADD_WEEKLY_MARKS_SUCCESS,
        payload: data, // The response from the backend
      });
    },
    onFailure: (error, dispatch) => {
      console.error(`Error adding marks for student ${studentId}:`, error);
      const errorMessage =
        error.error ||
        error.message ||
        `Failed to add marks for student ${studentId}`;
      if (error.status === 401 || error.status === 403) {
        dispatch(
          setAuthError(
            "Authentication failed or session expired. Please log in again."
          )
        );
      }
      dispatch({
        type: ADD_WEEKLY_MARKS_FAILURE,
        payload: { error: errorMessage },
      });
    },
    authRequired: true,
  });

// --- 7. Employee Action Creator (Updated - no mock fallback) ---
export const fetchEmployees = () =>
  apiRequest({
    url: "/api/data/empolyees",
    method: "GET",
    onStart: FETCH_EMPLOYEES_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: FETCH_EMPLOYEES_SUCCESS,
        payload: data || [],
      });
    },
    onFailure: (error, dispatch) => {
      console.error("Error fetching employees from API:", error);
      const errorMessage =
        error.error || error.message || "Failed to fetch employees";
      if (error.status === 401 || error.status === 403) {
        dispatch(setAuthError("Session expired please login again"));
      }
      dispatch({
        type: FETCH_EMPLOYEES_FAILURE,
        payload: { error: errorMessage },
      });
    },
    authRequired: true,
  });

// --- NEW: Add Employee Action Creator ---
export const addEmployee = (employeeData) =>
  apiRequest({
    url: "/api/data/addEmployee",
    method: "POST",
    data: employeeData, // The employee data to send in the request body
    onStart: ADD_EMPLOYEE_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: ADD_EMPLOYEE_SUCCESS,
        payload: data,
      });
      // Optionally, refetch the entire employee list to update UI
      dispatch(fetchEmployees());
    },
    onFailure: (error, dispatch) => {
      console.error("Error adding employee:", error);
      const errorMessage =
        error.error || error.message || "Failed to add employee";
      if (error.status === 401 || error.status === 403) {
        dispatch(
          setAuthError(
            "Authentication failed or session expired. Please log in again."
          )
        );
      }
      dispatch({
        type: ADD_EMPLOYEE_FAILURE,
        payload: { error: errorMessage },
      });
    },
    authRequired: true,
  });
export const addTimetableEntry = (timetableData) =>
  apiRequest({
    url: "/api/data/addTimetable",
    method: "POST",
    data: timetableData, // The payload you constructed in your component
    onStart: ADD_TIMETABLE_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: ADD_TIMETABLE_SUCCESS,
        payload: data, // The response from the backend
      });
      // Optionally, refetch the entire timetable list to update UI immediately
      dispatch(fetchUpcomingClasses({date :new Date().toLocaleDateString("en-GB")}));
    },
    onFailure: (error, dispatch) => {
      console.error("Error adding timetable entry:", error);
      const errorMessage =
        error.error || error.message || "Failed to add timetable entry.";
      if (error.status === 401 || error.status === 403) {
        dispatch(
          setAuthError(
            "Authentication failed or session expired. Please log in again."
          )
        );
      }
      dispatch({
        type: ADD_TIMETABLE_FAILURE,
        payload: { error: errorMessage },
      });
    },
    authRequired: true,
  });
export const updateTimetableEntry = (timetableData) =>
  apiRequest({
    url: "/api/data/updateTimetable",
    method: "POST",
    data: timetableData,
    onStart: ADD_TIMETABLE_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: ADD_TIMETABLE_SUCCESS,
        payload: data,
      });
      dispatch(fetchUpcomingClasses({date :new Date().toLocaleDateString("en-GB")}));
    },
    onFailure: (error, dispatch) => {
      console.error("Error updating timetable entry:", error);
      const errorMessage =
        error.error || error.message || "Failed to update timetable entry.";
      if (error.status === 401 || error.status === 403) {
        dispatch(setAuthError("Authentication failed. Please log in again."));
      }
      dispatch({
        type: ADD_TIMETABLE_FAILURE,
        payload: { error: errorMessage },
      });
    },
    authRequired: true,
  });

// --------------------------------
// studentsThunks.js
// --------------------------------
export const updateClassesCompleted =
  (studentId, delta, faculty) => async (dispatch) => {
    // Build the FSA-style action
    const apiAction = apiRequest({
      url: `/api/data/students/${studentId}/classes`,
      method: "POST",
      // Pass the faculty name/ID in the data payload
      data: { delta, faculty },
      authRequired: true,
    });

    // ⬇️ THIS dispatch actually triggers the middleware
    dispatch(apiAction);

    // Wait for the middleware to resolve the deferred promise it
    // attached to meta.deferred
    const updated = await apiAction.promise; // ✔ server data here

    dispatch({
      type: UPDATE_STUDENT_CLASSES_SUCCESS,
      payload: updated,
    });

    return updated;
  };

export const deleteTimetable = (timetableId) =>
  apiRequest({
    url: `/api/data/timetables/${timetableId}`, // This must match your backend DELETE route
    method: "DELETE",
    onStart: DELETE_TIMETABLE_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: DELETE_TIMETABLE_SUCCESS,
        payload: timetableId, // Send the ID of the deleted item for potential UI updates
      });
      // Re-fetch to update the list immediately after successful deletion
      dispatch(fetchUpcomingClasses({date :new Date().toLocaleDateString("en-GB")}));
    },
    onFailure: (error, dispatch) => {
      console.error("Error deleting timetable entry:", error);
      const errorMessage =
        error.error || error.message || "Failed to delete timetable entry.";
      if (error.status === 401 || error.status === 403) {
        dispatch(
          setAuthError(
            "Authentication failed or session expired. Please log in again."
          )
        );
      }
      dispatch({
        type: DELETE_TIMETABLE_FAILURE,
        payload: { error: errorMessage },
      });
      // No need to throw error here, as the component will handle dispatching
      // the failure type and potentially showing a notification based on that.
    },
    authRequired: true, // Assuming deletion requires authentication
  });

// New action creator to clear the add student status
export const clearAddStudentStatus = () => ({
  type: ADD_STUDENT_CLEAR_STATUS,
});

export const formatPaymentHistory = (payments = []) =>
  payments
    .map((p) => {
      const dateObj = toJsDate(p.date);
      if (!dateObj) {
        console.warn("Skipping payment without valid date:", p);
        return null;
      }

      return {
        name: dayjs(dateObj).format("DD MMM YY"), // X‑axis
        Paid: p.status === "Paid" ? 1 : 0,
        Unpaid: p.status === "Unpaid" ? 1 : 0,
        rawDate: dateObj, // keep if you need to sort later
      };
    })
    .filter(Boolean); // drop nulls

/**
 * Fetch the payment history for a single student (ascending order).
 * @param {string} studentId – Firestore document ID of the student
 */
export const fetchPaymentHistory = (studentId) =>
  apiRequest({
    url: `/api/data/students/${studentId}/payments?order=asc`,
    method: "GET",

    // ----- lifecycle handlers ---------------------------------------------
    onStart: FETCH_PAYMENTS_REQUEST,

    onSuccess: (data, dispatch) => {
      const formatted = formatPaymentHistory(data?.payments || []);
      dispatch({
        type: FETCH_PAYMENTS_SUCCESS,
        payload: formatted,
      });
    },

    onFailure: (error, dispatch) => {
      console.error("Error fetching payment history:", error);
      dispatch({
        type: FETCH_PAYMENTS_FAILURE,
        payload: {
          error: error?.error || error.message || "Failed to fetch payments",
        },
      });

      if (error?.status === 401 || error?.status === 403) {
        dispatch(setAuthError("Session expired please login again"));
      }
    },

    authRequired: true,
  });
export const addDemoClass = (demoClassData) =>
  apiRequest({
    url: "/api/data/addDemoClass", // This URL now hits your Firebase-backed Express route
    method: "POST",
    data: demoClassData,
    onStart: ADD_DEMO_CLASS_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: ADD_DEMO_CLASS_SUCCESS,
        payload: data.demoClass, // The newly added demo class from backend response
      });
      dispatch(fetchDemoClasses());
    },
    onFailure: (error, dispatch) => {
      console.error("Error adding demo class:", error);
      const errorMessage =
        error.error || error.message || "Failed to add demo class";
      // Handle authentication errors if needed
      dispatch({
        type: ADD_DEMO_CLASS_FAILURE,
        payload: { error: errorMessage },
      });
      alert(`Failed to add demo class: ${errorMessage}`);
    },
    authRequired: true, // Crucial as your backend routes are protected
  });

// Action to Fetch Demo Classes
export const fetchDemoClasses = () =>
  apiRequest({
    url: "/api/data/democlasses", // This URL now hits your Firebase-backed Express route
    method: "GET",
    onStart: FETCH_DEMO_CLASSES_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: FETCH_DEMO_CLASSES_SUCCESS,
        payload: data, // Array of demo classes from Firestore
      });
    },
    onFailure: (error, dispatch) => {
      console.error("Error fetching demo classes:", error);
      dispatch({
        type: FETCH_DEMO_CLASSES_FAILURE,
        payload: { error: error.message || "Failed to fetch demo classes" },
      });
    },
  });
export const updateDemoClassStatus = (id, newStatus) =>
  apiRequest({
    url: `/api/data/updateDemoClass/${id}`, // Endpoint for updating a specific demo class
    method: "PUT", // Use PUT for updating an existing resource
    data: { status: newStatus }, // The data payload to send to the backend
    onStart: UPDATE_DEMO_CLASS_STATUS_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: UPDATE_DEMO_CLASS_STATUS_SUCCESS,
        payload: data.demoClass, // Your backend sends { message: "...", demoClass: { ... } }
      });
      dispatch(fetchDemoClasses());
    },
    onFailure: (error, dispatch) => {
      console.error(`Error updating status for demo class ${id}:`, error);
      dispatch({
        type: UPDATE_DEMO_CLASS_STATUS_FAILURE,
        payload: {
          error: error.message || "Failed to update demo class status",
        },
      });
    },
  });
export const deleteDemoClass = (demoId) =>
  apiRequest({
    url: `/api/data/democlasses/${demoId}`,
    method: "DELETE",
    onStart: DELETE_DEMO_CLASS_REQUEST,
    onSuccess: (response, dispatch) => {
      dispatch({
        type: DELETE_DEMO_CLASS_SUCCESS,
        payload: demoId, // Pass the ID of the deleted demo to update the state
      });
      console.log(`Demo class with ID ${demoId} deleted successfully.`);
    },
    onFailure: (error, dispatch) => {
      console.error(`Error deleting demo class ${demoId}:`, error);
      dispatch({
        type: DELETE_DEMO_CLASS_FAILURE,
        payload: { error: error.message || "Failed to delete demo class" },
      });
    },
  });
export const updateDemoClass = (demoData) =>
  apiRequest({
    url: `/api/data/democlasses/${demoData.id}`, // Endpoint for updating a specific demo class
    method: "PATCH", // Use PATCH for partial updates, PUT would be for full replacement
    data: demoData, // Send the entire updated data object
    authRequired: true,

    // ----- lifecycle handlers ---------------------------------------------
    onStart: UPDATE_DEMO_CLASS_REQUEST,

    onSuccess: (data, dispatch) => {
      // Assuming your backend returns the updated demoClass object directly
      dispatch({
        type: UPDATE_DEMO_CLASS_SUCCESS,
        payload: data, // The backend response should be the updated object
      });

      // Optionally, you might want to refetch the entire list to ensure consistency,
      // especially if your local state management for updates is complex.
      // dispatch(fetchDemoClasses());
    },

    onFailure: (error, dispatch) => {
      console.error(`Error updating demo class ${demoData.id}:`, error);
      dispatch({
        type: UPDATE_DEMO_CLASS_FAILURE,
        payload: {
          error:
            error?.error || error?.message || "Failed to update demo class",
        },
      });

      // Handle authentication errors if needed
      if (error?.status === 401 || error?.status === 403) {
        // You might have a specific action for this, e.g.,
        // dispatch(setAuthError("Session expired please login again"));
      }
    },
  });
export const generateAndSaveTimetables = (timetablesToSave) =>
  apiRequest({
    url: "/api/data/saveGeneratedTimetables", // New Express route for saving
    method: "POST",
    data: { timetables: timetablesToSave }, // Send the array of timetables in a 'timetables' field
    onStart: GENERATE_AND_SAVE_TIMETABLES_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: GENERATE_AND_SAVE_TIMETABLES_SUCCESS,
        payload: data.savedTimetables, // Backend should return saved data
      });
      // Crucial: Re-fetch existing classes to include the newly saved ones
      dispatch(fetchUpcomingClasses({date :new Date().toLocaleDateString("en-GB")}));
    },
    onFailure: (error, dispatch) => {
      console.error("Error saving generated timetables:", error);
      const errorMessage =
        error.error || error.message || "Failed to save generated timetables";
      dispatch({
        type: GENERATE_AND_SAVE_TIMETABLES_FAIL,
        payload: errorMessage,
      });
      // No alert here, let the component handle snackbar
      throw new Error(errorMessage); // Re-throw to allow component to catch and show message
    },
    authRequired: true, // Assuming your timetable saving is a protected action
  });

export const saveAutoGeneratedTimetables = (timetablesData) =>
  apiRequest({
    url: `/api/data/autoTimetables/saveBatch`, // New backend route
    method: "POST",
    data: timetablesData,
    onStart: SAVE_AUTOGENERATED_TIMETABLES_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: SAVE_AUTOGENERATED_TIMETABLES_SUCCESS,
        payload: data.message, // always string, safe for React
      });
      // After saving, re-fetch auto-timetables to update the UI with the newly saved ones
      dispatch(fetchAutoTimetablesForToday());
    },
    onFailure: (error, dispatch) => {
      console.error("Error saving auto-generated timetables:", error);

      // Ensure errorMessage is always a string
      const errorMessage =
        (typeof error === "string" && error) ||
        error?.error ||
        error?.message ||
        error?.response?.data?.message ||
        "Failed to save auto-generated timetables.";

      dispatch({
        type: SAVE_AUTOGENERATED_TIMETABLES_FAILURE,
        payload: { error: errorMessage },
      });
    },
    authRequired: true,
  });

export const saveOrFetchAutoTimetables = (dateStr, timetablesData) =>
  apiRequest({
    url: `/api/data/autoTimetables/saveOrFetch`, // New backend route
    method: "POST",
    data: { date: dateStr, timetables: timetablesData },
    onStart: SAVE_OR_FETCH_AUTOTIMETABLES_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: SAVE_OR_FETCH_AUTOTIMETABLES_SUCCESS,
        payload: data.timetables, // The backend will send back the timetables
      });
      // Optionally, show a success message if saving occurred
      if (data.message) {
        console.log(data.message);
      }
    },
    onFailure: (error, dispatch) => {
      console.error("Error with auto-generated timetables:", error);
      const errorMessage =
        error?.error || error?.message || "Failed to fetch or save timetables.";
      dispatch({
        type: SAVE_OR_FETCH_AUTOTIMETABLES_FAILURE,
        payload: { error: errorMessage },
      });
    },
    authRequired: true,
  });

/**
 * Fetches auto-generated timetables for the current user and today's date.
 * This is crucial for the daily check.
 */
export const fetchAutoTimetablesForToday = () =>
  apiRequest({
    url: `/api/data/autoTimetables/today`, // Backend will use current date and user ID
    method: "GET",
    onStart: FETCH_AUTOTIMETABLES_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: FETCH_AUTOTIMETABLES_SUCCESS,
        payload: data, // Should be an array of auto-timetables for the day
      });
    },
    onFailure: (error, dispatch) => {
      console.error("Error fetching auto timetables:", error);
      const errorMessage =
        error.error || error.message || "Failed to fetch auto timetables.";
      // IMPORTANT: Check if the error is due to user not being logged in/auth issue
      // If you explicitly check for user.uid in frontend and backend, this error should be less frequent
      if (error.status === 401 || error.status === 403) {
        dispatch(
          setAuthError(
            "Authentication failed or session expired. Please log in again."
          )
        );
      }
      dispatch({
        type: FETCH_AUTOTIMETABLES_FAILURE,
        payload: { error: errorMessage },
      });
    },
    authRequired: true,
  });

/**
 * Updates an existing auto-generated timetable entry.
 * @param {Object} timetableData The updated timetable object. Must include 'id'.
 */
export const updateAutoTimetableEntry = (timetableData) =>
  apiRequest({
    url: `/api/data/autoTimetables/update`, // New backend route
    method: "POST", // Or PUT/PATCH if your API is RESTful
    data: timetableData,
    onStart: UPDATE_AUTOTIMETABLE_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: UPDATE_AUTOTIMETABLE_SUCCESS,
        payload: data,
      });
      dispatch(fetchAutoTimetablesForToday()); // Re-fetch to update the list
    },
    onFailure: (error, dispatch) => {
      console.error("Error updating auto-generated timetable entry:", error);
      const errorMessage =
        error.error ||
        error.message ||
        "Failed to update auto-generated timetable entry.";
      if (error.status === 401 || error.status === 403) {
        dispatch(setAuthError("Authentication failed. Please log in again."));
      }
      dispatch({
        type: UPDATE_AUTOTIMETABLE_FAILURE,
        payload: { error: errorMessage },
      });
    },
    authRequired: true,
  });

/**
 * Deletes an auto-generated timetable entry by its ID.
 * @param {string} timetableId The ID of the auto-timetable to delete.
 */
export const deleteAutoTimetable = (timetableId) =>
  apiRequest({
    url: `/api/data/autoTimetables/${timetableId}`, // New backend route
    method: "DELETE",
    onStart: DELETE_AUTOTIMETABLE_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: DELETE_AUTOTIMETABLE_SUCCESS,
        payload: timetableId,
      });
      dispatch(fetchAutoTimetablesForToday()); // Re-fetch to update the list
    },
    onFailure: (error, dispatch) => {
      console.error("Error deleting auto-generated timetable entry:", error);
      const errorMessage =
        error.error ||
        error.message ||
        "Failed to delete auto-generated timetable entry.";
      if (error.status === 401 || error.status === 403) {
        dispatch(
          setAuthError(
            "Authentication failed or session expired. Please log in again."
          )
        );
      }
      dispatch({
        type: DELETE_AUTOTIMETABLE_FAILURE,
        payload: { error: errorMessage },
      });
    },
    authRequired: true,
  });
export const fetchExpenditures = (year, month, compareType = null) =>
  apiRequest({
    url: `/api/expenditures?year=${year}&month=${month}${
      compareType ? `&compare=${compareType}` : ""
    }`,
    method: "GET",
    onStart: FETCH_EXPENDITURES_REQUEST,
    onSuccess: (data, dispatch) => {
      const expendituresArray = data.expenditures || [];
      const paymentsArray = data.payments || [];

      const totalStudentPayments = data.totalStudentPayments || 0;
      const previousTotalStudentPayments =
        data.previousPeriodTotalPayments || 0;

      const totalExpenditure = data.totalExpenditure || 0;
      const previousTotalExpenditure = data.previousTotalExpenditure || 0;

      dispatch({
        type: FETCH_EXPENDITURES_SUCCESS,
        payload: expendituresArray,
      });

      dispatch({
        type: FETCH_TOTAL_PAYMENTS_SUCCESS, // Use the new action type
        payload: paymentsArray,
      });

      dispatch({
        type: FETCH_EXPENDITURES_STUDENT_PAYMENTS_SUM_SUCCESS,
        payload: {
          current: totalStudentPayments,
          previous: previousTotalStudentPayments,
        },
      });

      dispatch({
        type: FETCH_EXPENDITURES_SUM_SUCCESS,
        payload: {
          current: totalExpenditure,
          previous: previousTotalExpenditure,
        },
      });
    },

    // ... rest of the action remains the same
  });

/**
 * Action to add a new expenditure.
 * @param {object} expenditureData - The data for the new expenditure.
 * @param {function} callback - A callback function to run on success (e.g., for navigation).
 */
export const addExpenditure = (expenditureData, callback) =>
  apiRequest({
    url: "/api/expenditures",
    method: "POST",
    data: expenditureData,
    onStart: ADD_EXPENDITURE_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: ADD_EXPENDITURE_SUCCESS,
        payload: data,
      });
      if (callback) callback(); // Execute the callback on success
    },
    onFailure: (error, dispatch) => {
      console.error("Error adding expenditure:", error);
      dispatch({
        type: ADD_EXPENDITURE_FAILURE,
        payload: { error: error.message || "Failed to add expenditure" },
      });
      // Optionally, throw the error to be caught in the component
      throw new Error(error.message || "Failed to add expenditure");
    },
    authRequired: true,
  });

/**
 * Action to delete an expenditure.
 * @param {string} expenditureId - The ID of the expenditure to delete.
 */
export const deleteExpenditure = (expenditureId) =>
  apiRequest({
    url: `/api/expenditures/${expenditureId}`,
    method: "DELETE",
    onStart: DELETE_EXPENDITURE_REQUEST,
    onSuccess: (_, dispatch) => {
      dispatch({
        type: DELETE_EXPENDITURE_SUCCESS,
        payload: expenditureId, // Send the ID to the reducer to filter the state
      });
    },
    onFailure: (error, dispatch) => {
      console.error("Error deleting expenditure:", error);
      dispatch({
        type: DELETE_EXPENDITURE_FAILURE,
        payload: { error: error.message || "Failed to delete expenditure" },
      });
    },
    authRequired: true,
  });
export const updateExpenditure = (expenditureId, expenditureData) =>
  apiRequest({
    url: `/api/expenditures/${expenditureId}`,
    method: "PUT", // Use PUT for updates
    data: expenditureData,
    onStart: UPDATE_EXPENDITURE_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: UPDATE_EXPENDITURE_SUCCESS,
        payload: data, // The API should return the updated object
      });
    },
    onFailure: (error, dispatch) => {
      dispatch({
        type: UPDATE_EXPENDITURE_FAILURE,
        payload: { error: error.message || "Failed to update expenditure" },
      });
      throw new Error(error.message || "Failed to update expenditure");
    },
  });
export const fetchStudentExams = () =>
  apiRequest({
    url: "/api/data/studentexams",
    method: "GET",
    onStart: FETCH_STUDENT_EXAMS_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: FETCH_STUDENT_EXAMS_SUCCESS,
        payload: data,
      });
    },
    onFailure: (error, dispatch) => {
      dispatch({
        type: FETCH_STUDENT_EXAMS_FAILURE,
        payload: { error: error.message || "Failed to fetch student exams" },
      });
    },
  });

// Add Exam
export const addStudentExam = (examData) =>
  apiRequest({
    url: "/api/data/addStudentExam",
    method: "POST",
    data: examData,
    onStart: ADD_STUDENT_EXAM_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({ type: ADD_STUDENT_EXAM_SUCCESS, payload: data.exam });
    },
    onFailure: (error, dispatch) => {
      dispatch({
        type: ADD_STUDENT_EXAM_FAILURE,
        payload: { error: error.message || "Failed to add student exam" },
      });
    },
  });

// Update Exam
export const updateStudentExam = (examData) =>
  apiRequest({
    url: `/api/data/studentexams/${examData.id}`,
    method: "PATCH",
    data: examData,
    onStart: UPDATE_STUDENT_EXAM_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({ type: UPDATE_STUDENT_EXAM_SUCCESS, payload: data });
    },
    onFailure: (error, dispatch) => {
      dispatch({
        type: UPDATE_STUDENT_EXAM_FAILURE,
        payload: { error: error.message || "Failed to update student exam" },
      });
    },
  });

// Delete Exam
export const deleteStudentExam = (examId) =>
  apiRequest({
    url: `/api/data/studentexams/${examId}`,
    method: "DELETE",
    onStart: DELETE_STUDENT_EXAM_REQUEST,
    onSuccess: (_, dispatch) => {
      dispatch({ type: DELETE_STUDENT_EXAM_SUCCESS, payload: examId });
    },
    onFailure: (error, dispatch) => {
      dispatch({
        type: DELETE_STUDENT_EXAM_FAILURE,
        payload: { error: error.message || "Failed to delete student exam" },
      });
    },
  });

// This is the new, simplified action creator.
export const fetchClassUpdates = () =>
  apiRequest({
    url: "/api/data/classUpdates",
    method: "GET",
    onStart: FETCH_CLASS_UPDATES_START,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: FETCH_CLASS_UPDATES_SUCCESS,
        payload: data || [],
      });
    },
    onFailure: (error, dispatch) => {
      console.error("Error fetching class updates:", error);
      const errorMessage =
        error.error || error.message || "Failed to fetch class updates";
      dispatch({
        type: FETCH_CLASS_UPDATES_FAILURE,
        payload: { error: errorMessage },
      });
    },
    authRequired: true,
  });

export const fetchMonthlyPayments = () =>
  apiRequest({
    url: "/api/data/payments/monthly",
    method: "GET",
    onStart: "FETCH_MONTHLY_PAYMENTS_REQUEST",
    onSuccess: (data, dispatch) => {
      // The `data` object should contain the monthly totals from the server
      const monthlyPayments = data.totals || {};

      dispatch({
        type: FETCH_MONTHLY_PAYMENTS_SUCCESS,
        payload: monthlyPayments,
      });
    },
    onFailure: (error, dispatch) => {
      // Dispatch an error action if the API call fails
      dispatch({
        type: "FETCH_MONTHLY_PAYMENTS_FAILURE",
        payload: error,
      });
      console.error("Error fetching monthly payments:", error);
    },
    authRequired: true,
  });

// The new fetch monthly payments action in the requested format
export const fetchAllPayments = () =>
  apiRequest({
    url: "/api/data/payments/all",
    method: "GET",
    onStart: FETCH_ALL_MONTHLY_PAYMENTS_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: FETCH_ALL_MONTHLY_PAYMENTS_SUCCESS,

        payload: data, // Array of demo classes from Firestore
      });
    },
    onFailure: (error, dispatch) => {
      console.error("Error fetching monthly payments:", error);
      dispatch({
        type: FETCH_ALL_MONTHLY_PAYMENTS_FAILURE,
        payload: { error: error.message || "Failed to fetch monthly payments" },
      });
    },
  });

// Add a new action to update the weekly syllabus
export const updateWeeklySyllabus = (studentId, updatedLessons) =>
  apiRequest({
    url: `/api/data/syllabus/${studentId}`,
    method: "PATCH",
    data: { lessons: updatedLessons }, // Send the new array of lesson objects
    onStart: UPDATE_SYLLABUS_REQUEST,
    onSuccess: (data, dispatch) => {
      dispatch({
        type: UPDATE_SYLLABUS_SUCCESS,
        payload: {
          studentId,
          lessons: data.lessons,
        },
      });
      // Optionally, refetch the data to ensure UI consistency
      dispatch(fetchStudents());
    },
    onFailure: (error, dispatch) => {
      console.error(`Error updating syllabus for student ${studentId}:`, error);
      dispatch({
        type: UPDATE_SYLLABUS_FAILURE,
        payload: { error: error.message || "Failed to update syllabus" },
      });
    },
  });


export const updateEmployeeData = (employeeId, updatedData) =>
  apiRequest({
    url: `/api/data/employees/${employeeId}`, // The backend endpoint
    method: "PATCH", // Use PATCH for partial updates
    data: updatedData, // Send only the updated fields (e.g., { salary: 5000 } or { paid: true })
    onStart: UPDATE_EMPLOYEE_REQUEST, // ✅ make it same style as demo


    onSuccess: (data, dispatch) => {
      // Assuming your backend returns the updated employee object directly
      dispatch({
        type: UPDATE_EMPLOYEE_SUCCESS,
        payload: data, // The backend response should be the updated object
      });
    },

    onFailure: (error, dispatch) => {
      console.error(`Error updating employee ${employeeId}:`, error);
      dispatch({
        type: UPDATE_EMPLOYEE_FAILURE,
        payload: {
          employeeId, // Pass the ID to the reducer to handle the error state for this employee
          error: error?.error || error?.message || "Failed to update employee",
        },
      });
    },
  });